*neoscroll.txt*  Smooth scrolling

Author: Carles Rafols i Belles


===============================================================================
INTRODUCTION                                             *neoscroll-introduction*

The default mappings substitute most of the |scrolling| commands (see
|neoscroll-default-mappings| for details) to provide smooth window scrolling.
You can create your own scrolling commands using |neoscroll.scroll()|. You
can customize the scrolling behaviour and the scrolling stop rules by changing
the |neoscroll-options| as needed.

===============================================================================
QUICKSTART                                                 *neoscroll-quickstart*

Add the `setup()` function in your init file:
>
    " In init.lua:
    require('neoscroll').setup()
    " In init.vim:
    lua require('neoscroll').setup()

===============================================================================
FUNCTIONS                                                   *neoscroll-functions*

neoscroll.setup({opts})                                       *neoscroll-setup()*
    Overwrites the default options with the options in the table `opts`,
    defines the default mappings and creates the necessary commands.

    Example with all the default options: >
        require('neoscroll').setup({
            mappings = {'<C-u>', '<C-d>', '<C-b>',
                '<C-f>', '<C-y>', '<C-e>', 'zt', 'zz', 'zb'},
            hide_cursor = true,          
            stop_eof = true,             
            respect_scrolloff = false,   
            cursor_scrolls_alone = true  
        })
<

neoscroll.scroll(lines, move_cursor, time[, easing])           *neoscroll.scroll()*
    Scroll a number of lines or a fraction of the current window optionally
    using an easing function to smooth the start and the end of the scrolling
    animation.
        `lines`:
            - If integer: number of lines to scroll.
            - If float: number of "windows" to scroll (e.g. 0.1 = 10% of the
              current window's height.
            - A positive number scrolls downwards (mnemonic: increase line
              number). A negative number scrolls upwards (mnemonic: decrease
              line number).
        `move_cursor`: scroll and move the cursor simultaneously. When `true`
            scrolling downwards will stop when the cursor line is the last
            line of the file unless |stop_eof| is set to `true`.
        `time`: duration of the scrolling animation in milliseconds.
        `easing`: name of the easing function to use for the scrolling
            animation. If no name is passed the easing function defined in
            |easing_function| will be used. Supported easing function names:
            `quadratic`, `cubic`, `quartic`, `quintic`, `circular`, `sine`.

    Examples: >
        " Scroll 10 lines upwards mimicking <C-d>
        :lua require('neoscroll').scroll(-10, true, 300)
        " Scroll 'w:scroll' lines downwards (mimicking <C-u>
        :lua require('neoscroll').scroll(vim.wo.scroll, true, 300)
        " Scroll 10% of the window height downwards
        :lua require('neoscroll').scroll(0.1, true, 200)
        " Scroll only the screen 10% of the window height downwards
        :lua require('neoscroll').scroll(0.1, false, 200)
        " Scroll 20 lines upwards using the "sine" easing function.
        :lua require('neoscroll').scroll(-20, true, 400, "sine")
<

neoscroll.{zt,zz,zb}(half_win_time, easing)         *neoscroll-zt-zz-zb*
    `scroll()` wrapper functions to mimic |zt|, |zz| and |zb| scrolling
    commands. The `half_win_time` argument is the time it would take to
    scroll half of the window. The `time` argument passed to the `scroll()`
    function is calculated as: >
        half_screen_time * (lines_to_scroll/(window_lines/2))
<
    where `lines_to_scroll` is the number of lines to be scrolled and
    `window_lines` is the number of lines of the window. This ensures that
    when there are very few lines to scroll the duration of the scrolling
    animation is proportionately shorter.

neoscroll.config.set_mappings(custom_mappings)
    Map all the keymaps in the `custom_mappings` table in normal, visual and
    select mode. `custom_mappings` must have the following form: >
        t[keys] = {function, {function arguments}}
<    If `custom_mappings` is not passed then the default mappings are loaded
    only for the keys specified in the |mappings| option.

===============================================================================
COMMANDS                                                     *neoscroll-commands*

|NeoscrollEnablePM| / |NeoscrollDisablePM|
    Enable/disable "Performance Mode" which disables Tree-sitter and regular
    syntax highlighting while scrolling. Particularly useful for large files,
    slow machines or heavy regex syntax highlighting.

===============================================================================
OPTIONS                                                       *neoscroll-options*

|mappings| (default: `{'<C-u>', '<C-d>', '<C-b>', '<C-f>',`
                    `'<C-y>', '<C-e>', 'zt', 'zz', 'zb'}`)
    All the keys defined in this option will be mapped to their corresponding
    default scrolling animation. To no map any key pass an empty table (`{}`).

|hide_cursor| (default: `true`)
    If 'termguicolors' is set hide the cursor while scrolling.

|stop_eof| (default: `true`)
    When `move_cursor` is `true` scrolling downwards will stop when the bottom
    line of the window is the last line of the file.

|respect_scrolloff| (default: `false`)
    The cursor stops at the scrolloff margin. Try combining this option with
    either |stop_eof| or |cursor_scrolls_alone| (or both).

|cursor_scrolls_alone| (default: `true`)
    The cursor will keep on scrolling even if the window cannot scroll
    further.

|easing_function| (default: `nil`)
    Name of the easing function to use by default in all scrolling animamtions.
    `scroll()` that don't provide the optional `easing` argument will use this
    easing function. If set to `nil` (the default) no easing function will be
    used in the scrolling animation (constant scrolling speed).

===============================================================================
DEFAULT MAPPINGS                                     *neoscroll-default-mappings*

The following mappings are valid for normal, visual and select mode.

      Key     Function ~
     <C-u>    scroll(-vim.wo.scroll, true, 350)
     <C-d>    scroll( vim.wo.scroll, true, 350)
     <C-b>    scroll(-vim.api.nvim_win_get_height(0), true, 550)
     <C-f>    scroll( vim.api.nvim_win_get_height(0), true, 550)
     <C-y>    scroll(-0.10, false, 100)
     <C-e>    scroll( 0.10, false, 100)
      zt      zt(200)
      zz      zz(200)
      zb      zb(200)

===============================================================================
vim:tw=78:ts=4:et:ft=help:norl:
